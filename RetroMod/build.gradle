plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = '1.0'
group = 'dev.wildmonke.retromod'
archivesBaseName = 'retromod'


java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    
    mappings channel: 'official', version: '1.19'


    
    runs {
        client {
            workingDirectory project.file('run')

            
            property 'forge.logging.markers', 'REGISTRIES'

            
            property 'forge.logging.console.level', 'debug'

    
            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                retromod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                retromod {
                    source sourceSets.main
                }
            }
        }

       
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                retromod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

           
            args '--mod', archivesBaseName, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                retromod {
                    source sourceSets.main
                }
            }
        }
    }
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }

}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19-41.0.45'
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.19:3.1.3')


}


jar {
    manifest {
        attributes([
                "Specification-Title"     : "Retro Mod",
                "Specification-Vendor"    : "wildmonke",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "wildmonke",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


jar.finalizedBy('reobfJar')


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' 
}
